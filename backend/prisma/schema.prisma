// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  nome         String?
  email        String    @unique
  login        String
  senha        String
  ativo        Boolean   @default(true)
  ultimo_login DateTime?
  avatar       String?
  createdAt    DateTime  @default(dbgenerated("SWITCHOFFSET(GETDATE(), '-03:00')"))
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  id_empresa   Int

  empresa              Empresa?                     @relation(fields: [id_empresa], references: [id_empresa], onDelete: Cascade, onUpdate: Cascade)
  venda                Venda[]
  orcamento            Orcamento[]
  movimentacao_estoque MovimentacaoEstoque[]
  historico_situacao   HistoricoSituacaoVenda[]
  historico_orcamento  HistoricoSituacaoOrcamento[]

  @@map("t_usuario")
}

model Empresa {
  id_empresa     Int              @id @default(autoincrement())
  nome           String           @unique
  nome_fantasia  String?
  logradouro     String?
  numero         String?
  complemento    String?
  bairro         String?
  cidade         String?
  estado         String?
  cep            String?
  inscr_estadual String?
  cnpj           String           @unique
  email          String           @unique
  telefone       String?
  avatar         String?
  ativo          Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  usuarios       User[]
  clientes       Cliente[]
  fornecedores   Fornecedor[]
  transportes    Transportadora[]
  produtos       Produto[]
  venda          Venda[]
  orcamento      Orcamento[]
  nota_fiscal    NotaFiscal[]

  @@map("t_empresa")
}

model Cliente {
  id_cliente          Int       @id @default(autoincrement())
  nome                String
  tipo_cliente        String
  cpf                 String?
  cnpj                String?
  razao_social        String?
  inscricao_estadual  String?
  inscricao_municipal String?
  inscricao_suframa   String?
  telefone            String?
  tipo_contribuinte   String?
  rg_representante    String?
  dt_nascimento       DateTime?
  email               String?
  observacao          String?
  avatar              String?
  ativo               Boolean?  @default(true)
  createdAt           DateTime  @default(dbgenerated("SWITCHOFFSET(GETDATE(), '-03:00')"))
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  id_empresa          Int

  empresa    Empresa?    @relation(fields: [id_empresa], references: [id_empresa], onDelete: Cascade, onUpdate: Cascade)
  enderecos  Endereco[]  @relation("ClienteEnderecos")
  contatos   Contato[]   @relation("ClienteContatos")
  vendas     Venda[]
  orcamentos Orcamento[]

  @@map("t_cliente")
}

model Fornecedor {
  id_fornecedor       Int       @id @default(autoincrement())
  nome                String
  tipo_fornecedor     String
  cpf                 String?
  cnpj                String?
  razao_social        String?
  inscricao_estadual  String?
  inscricao_municipal String?
  inscricao_suframa   String?
  telefone            String?
  tipo_contribuinte   String?
  rg_representante    String?
  dt_nascimento       DateTime?

  email      String?
  observacao String?
  avatar     String?
  ativo      Boolean?  @default(true)
  createdAt  DateTime  @default(dbgenerated("SWITCHOFFSET(GETDATE(), '-03:00')"))
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  id_empresa Int

  empresa   Empresa?   @relation(fields: [id_empresa], references: [id_empresa], onDelete: Cascade, onUpdate: Cascade)
  enderecos Endereco[] @relation("FornecedorEnderecos")
  contatos  Contato[]  @relation("FornecedorContatos")
  produtos  Produto[]

  @@map("t_fornecedor")
}

model Transportadora {
  id_transportadora   Int       @id @default(autoincrement())
  nome                String
  tipo_transportadora String
  cpf                 String?
  cnpj                String?
  razao_social        String?
  inscricao_estadual  String?
  inscricao_municipal String?
  inscricao_suframa   String?
  telefone            String?
  tipo_contribuinte   String?
  rg_representante    String?
  dt_nascimento       DateTime?
  email               String?
  observacao          String?
  avatar              String?
  ativo               Boolean?  @default(true)
  createdAt           DateTime  @default(dbgenerated("SWITCHOFFSET(GETDATE(), '-03:00')"))
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  id_empresa          Int

  empresa    Empresa?    @relation(fields: [id_empresa], references: [id_empresa], onDelete: Cascade, onUpdate: Cascade)
  enderecos  Endereco[]  @relation("TransportadoraEnderecos")
  contatos   Contato[]   @relation("TransportadoraContatos")
  vendas     Venda[]
  orcamentos Orcamento[]

  @@map("t_transportadora")
}

model Endereco {
  id_endereco       Int     @id @default(autoincrement())
  tipo_endereco     String?
  cep               String?
  rua               String?
  numero            String?
  complemento       String?
  bairro            String?
  cidade            String?
  estado            String?
  id_cliente        Int?
  id_fornecedor     Int?
  id_transportadora Int?

  cliente        Cliente?        @relation("ClienteEnderecos", fields: [id_cliente], references: [id_cliente], onDelete: Cascade, onUpdate: Cascade)
  fornecedor     Fornecedor?     @relation("FornecedorEnderecos", fields: [id_fornecedor], references: [id_fornecedor], onDelete: NoAction, onUpdate: NoAction)
  transportadora Transportadora? @relation("TransportadoraEnderecos", fields: [id_transportadora], references: [id_transportadora], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_endereco")
}

model Contato {
  id_contato        Int             @id @default(autoincrement())
  tipo_contato      String?
  nome              String?
  observacao        String?
  id_cliente        Int?
  id_fornecedor     Int?
  id_transportadora Int?
  cliente           Cliente?        @relation("ClienteContatos", fields: [id_cliente], references: [id_cliente], onDelete: Cascade, onUpdate: Cascade)
  fornecedor        Fornecedor?     @relation("FornecedorContatos", fields: [id_fornecedor], references: [id_fornecedor], onDelete: NoAction, onUpdate: NoAction)
  transportadora    Transportadora? @relation("TransportadoraContatos", fields: [id_transportadora], references: [id_transportadora], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_contato")
}

model Produto {
  id_produto          Int       @id @default(autoincrement())
  nome                String
  codigo_interno      String?
  codigo_barra        String?
  movimenta_estoque   Boolean?
  habilitar_nfce      Boolean?
  validade            Boolean?
  descricao           String?
  peso_kg             Float?
  altura_cm           Float?
  largura_cm          Float?
  comprimento_cm      Float?
  ativo               Boolean?  @default(true)
  valor_custo         Float?
  despesas_acessorias Float?
  despesas_outras     Float?
  custo_final         Float?
  valor_venda         Float?
  codigo_ncm          String?
  codigo_cest         String?
  cfop                String?
  origem              String?
  codigo_beneficio    String?
  peso_bruto          Float?
  peso_liquido        Float?
  numero_fci          String?
  vl_tribut           Float?
  vl_fixo_pis         Float?
  vl_fixo_cofins      Float?
  vl_fixo_pis_st      Float?
  vl_fixo_cofins_st   Float?
  createdAt           DateTime  @default(dbgenerated("SWITCHOFFSET(GETDATE(), '-03:00')"))
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  id_empresa          Int
  id_fornecedor       Int?

  empresa              Empresa?              @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction)
  fornecedor           Fornecedor?           @relation(fields: [id_fornecedor], references: [id_fornecedor], onDelete: NoAction, onUpdate: NoAction)
  campos               CamposExtra[]
  estoque              ControleEstoque[]
  item_venda           ItemVenda[]
  item_orcamento       ItemOrcamento[]
  movimentacao_estoque MovimentacaoEstoque[]

  @@map("t_produto")
}

model ControleEstoque {
  id_estoque          Int       @id @default(autoincrement())
  id_produto          Int       @unique
  quantidade          Int?
  estoque_min         Int?
  estoque_max         Int?
  data_ultima_entrada DateTime?
  data_ultima_saida   DateTime?

  produto Produto @relation(fields: [id_produto], references: [id_produto], onDelete: Cascade, onUpdate: Cascade)

  @@map("t_controle_estoque")
}

model CamposExtra {
  id_campo_extra Int     @id @default(autoincrement())
  descricao      String?
  conteudo       String?
  id_produto     Int

  produto Produto? @relation(fields: [id_produto], references: [id_produto], onDelete: Cascade, onUpdate: Cascade)

  @@map("t_campos_extra")
}

model LucroSugerido {
  id_lucro_sugerido Int     @id @default(autoincrement())
  descricao         String?
  valor             Float?

  @@map("t_lucro_sugerido")
}

model Venda {
  id_venda           Int       @id @default(autoincrement())
  numero_venda       Int       @unique
  data_venda         DateTime
  id_empresa         Int
  id_cliente         Int
  id_situacao_venda  Int
  id_canal_venda     Int
  id_user            Int
  id_forma_pagamento Int
  id_transportadora  Int?
  valor_total        Float
  valor_produto      Float?
  valor_desconto     Float?
  valor_frete        Float?
  observacao         String?
  observacao_interna String?
  createdAt          DateTime  @default(dbgenerated("SWITCHOFFSET(GETDATE(), '-03:00')"))
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  empresa                  Empresa?                 @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction)
  cliente                  Cliente?                 @relation(fields: [id_cliente], references: [id_cliente], onDelete: Cascade, onUpdate: Cascade)
  usuario                  User?                    @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transportadora           Transportadora?          @relation(fields: [id_transportadora], references: [id_transportadora], onDelete: NoAction, onUpdate: NoAction)
  itens                    ItemVenda[]
  movimentacao_estoque     MovimentacaoEstoque[]
  historico_situacao_venda HistoricoSituacaoVenda[]
  pagamento                Pagamento[]
  situacao_venda           SituacaoVenda            @relation(fields: [id_situacao_venda], references: [id_situacao_venda], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_venda")
}

model Orcamento {
  id_orcamento       Int       @id @default(autoincrement())
  numero_orcamento   Int       @unique
  data_orcamento     DateTime
  id_empresa         Int
  id_cliente         Int?
  id_situacao_venda  Int
  id_canal_orcamento Int?
  id_user            Int?
  id_forma_pagamento Int?
  id_transportadora  Int?
  validade_orcamento String?
  introducao         String?
  valor_total        Float
  valor_produto      Float?
  valor_desconto     Float?
  valor_frete        Float?
  observacao         String?
  observacao_interna String?
  createdAt          DateTime  @default(dbgenerated("SWITCHOFFSET(GETDATE(), '-03:00')"))
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  empresa                      Empresa?                     @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction)
  cliente                      Cliente?                     @relation(fields: [id_cliente], references: [id_cliente], onDelete: Cascade, onUpdate: Cascade)
  usuario                      User?                        @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transportadora               Transportadora?              @relation(fields: [id_transportadora], references: [id_transportadora], onDelete: NoAction, onUpdate: NoAction)
  itens                        ItemOrcamento[]
  historico_situacao_orcamento HistoricoSituacaoOrcamento[]
  situacao_venda               SituacaoVenda                @relation(fields: [id_situacao_venda], references: [id_situacao_venda], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_orcamento")
}

model ItemOrcamento {
  id_item_orcamento Int   @id @default(autoincrement())
  id_orcamento      Int
  id_produto        Int
  numero_item       Int?
  quantidade        Int
  valor_unitario    Float
  valor_total       Float

  orcamento Orcamento @relation(fields: [id_orcamento], references: [id_orcamento], onDelete: Cascade, onUpdate: Cascade)

  produto Produto @relation(fields: [id_produto], references: [id_produto], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_item_orcamento")
}

model ItemVenda {
  id_item_venda  Int   @id @default(autoincrement())
  id_venda       Int
  id_produto     Int
  numero_item    Int?
  quantidade     Int
  valor_unitario Float
  valor_total    Float

  venda Venda @relation(fields: [id_venda], references: [id_venda], onDelete: Cascade, onUpdate: Cascade)

  produto Produto @relation(fields: [id_produto], references: [id_produto], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_item_venda")
}

model MovimentacaoEstoque {
  id_movimentacao   Int      @id @default(autoincrement())
  id_produto        Int
  tipo_movimentacao String // Pode ser "entrada" ou "saida"
  quantidade        Int
  quantidade_atual  Int?
  data_movimentacao DateTime @default(dbgenerated("SWITCHOFFSET(GETDATE(), '-03:00')"))
  id_usuario        Int
  id_venda          Int?
  descricao         String?

  produto Produto @relation(fields: [id_produto], references: [id_produto], onDelete: NoAction, onUpdate: NoAction)
  usuario User    @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction)
  venda   Venda?  @relation(fields: [id_venda], references: [id_venda], onDelete: Cascade, onUpdate: Cascade)

  @@map("t_movimentacao_estoque")
}

model NotaFiscal {
  id_nfe         Int       @id @default(autoincrement())
  id_empresa     Int
  ref            String?   @unique
  status         String?
  status_sefaz   String?
  mensagem_sefaz String?
  chave_nfe      String?
  numero_nfe     String?
  caminho_xml    String?
  caminho_pdf    String?
  data_emissao   DateTime?

  empresa Empresa @relation(fields: [id_empresa], references: [id_empresa], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_nota_fiscal")
}

model SituacaoVenda {
  id_situacao_venda   Int                          @id @default(autoincrement())
  descricao           String?
  cor                 String?
  ativo               Boolean?                     @default(true)
  venda               Venda[]
  orcamento           Orcamento[]
  situacao_historico  HistoricoSituacaoVenda[]
  orcamento_historico HistoricoSituacaoOrcamento[]

  @@map("t_situacao_venda")
}

model HistoricoSituacaoVenda {
  id_historico_situacao_venda Int      @id @default(autoincrement())
  descricao                   String?
  id_venda                    Int
  id_situacao_venda           Int
  id_usuario                  Int
  data                        DateTime @default(now())

  venda          Venda         @relation(fields: [id_venda], references: [id_venda], onDelete: Cascade, onUpdate: Cascade)
  situacao_venda SituacaoVenda @relation(fields: [id_situacao_venda], references: [id_situacao_venda], onDelete: NoAction, onUpdate: NoAction)
  usuario        User          @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_historico_situacao_venda")
}

model HistoricoSituacaoOrcamento {
  id_historico_situacao_orcamento Int      @id @default(autoincrement())
  descricao                       String?
  id_orcamento                    Int
  id_situacao_venda               Int
  id_usuario                      Int
  data                            DateTime @default(now())

  orcamento      Orcamento     @relation(fields: [id_orcamento], references: [id_orcamento], onDelete: Cascade, onUpdate: Cascade)
  situacao_venda SituacaoVenda @relation(fields: [id_situacao_venda], references: [id_situacao_venda], onDelete: NoAction, onUpdate: NoAction)
  usuario        User          @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_historico_situacao_orcamento")
}

model FormaPagamento {
  id_forma_pagamento Int      @id @default(autoincrement())
  descricao          String?
  ativo              Boolean? @default(true)

  pagamento Pagamento[]

  @@map("t_forma_pagamento")
}

model Pagamento {
  id_pagamento       Int       @id @default(autoincrement())
  id_venda           Int
  parcelado          Boolean // Indica se o pagamento é parcelado ou à vista
  venda              Boolean //Indica se é venda ou orçamento
  id_forma_pagamento Int // ID da forma de pagamento (1=PIX, 2=BOLETO, etc.)
  vencimento         DateTime
  valor              Float
  realizado          Boolean   @default(false)
  data_realizado     DateTime? // Data em que o pagamento foi realizado, pode ser nula se ainda não foi realizado
  observacao         String?

  vendas          Venda          @relation(fields: [id_venda], references: [id_venda], onDelete: Cascade, onUpdate: Cascade)
  forma_pagamento FormaPagamento @relation(fields: [id_forma_pagamento], references: [id_forma_pagamento], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_pagamento")
}
